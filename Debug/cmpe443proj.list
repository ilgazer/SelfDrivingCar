
cmpe443proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  080001f0  080001f0  000101f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00010450  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000450  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800044c  0800044c  0001044c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000450  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000450  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000397  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000015a  00000000  00000000  0001081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001435  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000907  00000000  00000000  00011e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000045e0  00000000  00000000  0001276c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00016d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  00016d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	e000      	b.n	8000202 <__do_global_dtors_aux+0x12>
 8000200:	bf00      	nop
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	08000430 	.word	0x08000430

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	e000      	b.n	8000222 <frame_dummy+0xe>
 8000220:	bf00      	nop
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	08000430 	.word	0x08000430

08000230 <main>:
#include "board/iser.h"
#include "utils.h"
#include "motors.h"


int main(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	init_motors();
 8000234:	f000 f806 	bl	8000244 <init_motors>
	set_speed(1200);
 8000238:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800023c:	f000 f88c 	bl	8000358 <set_speed>

	while(1){
 8000240:	e7fe      	b.n	8000240 <main+0x10>
	...

08000244 <init_motors>:
#include "board/rcc.h"
#include "board/gpio.h"
#include "board/iser.h"


void init_motors(){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	SET(RCC_AHB2ENR, GPIOAEN);
 8000248:	4b3f      	ldr	r3, [pc, #252]	; (8000348 <init_motors+0x104>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a3e      	ldr	r2, [pc, #248]	; (8000348 <init_motors+0x104>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6013      	str	r3, [r2, #0]
	SET(RCC_APB2ENR, TIM15EN);
 8000254:	4b3d      	ldr	r3, [pc, #244]	; (800034c <init_motors+0x108>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a3c      	ldr	r2, [pc, #240]	; (800034c <init_motors+0x108>)
 800025a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800025e:	6013      	str	r3, [r2, #0]


	SET_BITS(GPIOA->MODER, 2 * 2, 2, 2); //Left
 8000260:	4b3b      	ldr	r3, [pc, #236]	; (8000350 <init_motors+0x10c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a3a      	ldr	r2, [pc, #232]	; (8000350 <init_motors+0x10c>)
 8000266:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800026a:	6013      	str	r3, [r2, #0]
 800026c:	4b38      	ldr	r3, [pc, #224]	; (8000350 <init_motors+0x10c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a37      	ldr	r2, [pc, #220]	; (8000350 <init_motors+0x10c>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOA->AFR[0], 2 * 4, 14, 4);
 8000278:	4b35      	ldr	r3, [pc, #212]	; (8000350 <init_motors+0x10c>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a34      	ldr	r2, [pc, #208]	; (8000350 <init_motors+0x10c>)
 800027e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000282:	6213      	str	r3, [r2, #32]
 8000284:	4b32      	ldr	r3, [pc, #200]	; (8000350 <init_motors+0x10c>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a31      	ldr	r2, [pc, #196]	; (8000350 <init_motors+0x10c>)
 800028a:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800028e:	6213      	str	r3, [r2, #32]

	SET_BITS(GPIOA->MODER, 3 * 2, 2, 2); //Right
 8000290:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <init_motors+0x10c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <init_motors+0x10c>)
 8000296:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <init_motors+0x10c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2b      	ldr	r2, [pc, #172]	; (8000350 <init_motors+0x10c>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6013      	str	r3, [r2, #0]
	SET_BITS(GPIOA->AFR[0], 3 * 4, 14, 4);
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <init_motors+0x10c>)
 80002aa:	6a1b      	ldr	r3, [r3, #32]
 80002ac:	4a28      	ldr	r2, [pc, #160]	; (8000350 <init_motors+0x10c>)
 80002ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002b2:	6213      	str	r3, [r2, #32]
 80002b4:	4b26      	ldr	r3, [pc, #152]	; (8000350 <init_motors+0x10c>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a25      	ldr	r2, [pc, #148]	; (8000350 <init_motors+0x10c>)
 80002ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80002be:	6213      	str	r3, [r2, #32]

	TIM15->PSC = 4; //Set Prescalers
 80002c0:	4b24      	ldr	r3, [pc, #144]	; (8000354 <init_motors+0x110>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM15->ARR = 4000; //Set ARR
 80002c6:	4b23      	ldr	r3, [pc, #140]	; (8000354 <init_motors+0x110>)
 80002c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM15->SR = 0; //clear UIF if it is set
 80002ce:	4b21      	ldr	r3, [pc, #132]	; (8000354 <init_motors+0x110>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]

	TIM15->CCMR1 =
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <init_motors+0x110>)
 80002d6:	f646 0268 	movw	r2, #26728	; 0x6868
 80002da:	619a      	str	r2, [r3, #24]
			OCxM_PWM1 << OC1M	|
			OCxM_PWM1 << OC2M	|
			1 << OC1PE			|
			1 << OC2PE;

	SET(TIM15->CR1, ARPE);
 80002dc:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <init_motors+0x110>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <init_motors+0x110>)
 80002e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e6:	6013      	str	r3, [r2, #0]

	TIM15->BDTR |= 1 << 15;
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <init_motors+0x110>)
 80002ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <init_motors+0x110>)
 80002ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002f2:	6453      	str	r3, [r2, #68]	; 0x44

	TIM15->SR = 0; //clear UIF if it is set
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <init_motors+0x110>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
	TIM15->EGR |= 1;
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <init_motors+0x110>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a15      	ldr	r2, [pc, #84]	; (8000354 <init_motors+0x110>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6153      	str	r3, [r2, #20]

	SET(TIM15->CCER, CC1E);
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <init_motors+0x110>)
 8000308:	6a1b      	ldr	r3, [r3, #32]
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <init_motors+0x110>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6213      	str	r3, [r2, #32]
	SET(TIM15->CCER, CC2E);
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <init_motors+0x110>)
 8000314:	6a1b      	ldr	r3, [r3, #32]
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <init_motors+0x110>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6213      	str	r3, [r2, #32]

	SET(TIM15->CR1, CEN); //TIMx_CNT is enabled (clocked)
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <init_motors+0x110>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <init_motors+0x110>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]

	TIM15->SR = 0; //clear UIF if it is set
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <init_motors+0x110>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
	TIM15->EGR |= 1;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <init_motors+0x110>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <init_motors+0x110>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6153      	str	r3, [r2, #20]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	4002104c 	.word	0x4002104c
 800034c:	40021060 	.word	0x40021060
 8000350:	42020000 	.word	0x42020000
 8000354:	40014000 	.word	0x40014000

08000358 <set_speed>:

void set_speed(int speed){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	TIM15->CCR1 = 1000;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <set_speed+0x38>)
 8000362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000366:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 2000;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <set_speed+0x38>)
 800036a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800036e:	639a      	str	r2, [r3, #56]	; 0x38

	TIM15->SR = 0; //clear UIF if it is set
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <set_speed+0x38>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
	TIM15->EGR |= 1;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <set_speed+0x38>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <set_speed+0x38>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40014000 	.word	0x40014000

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	e000      	b.n	800039c <Reset_Handler+0x8>
 800039a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	; (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	; (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	; (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 f811 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff33 	bl	8000230 <main>

080003ca <LoopForever>:

LoopForever:
    b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d8:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>
	...

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	; (8000420 <__libc_init_array+0x38>)
 80003ec:	2600      	movs	r6, #0
 80003ee:	4c0d      	ldr	r4, [pc, #52]	; (8000424 <__libc_init_array+0x3c>)
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	; (8000428 <__libc_init_array+0x40>)
 80003fa:	2600      	movs	r6, #0
 80003fc:	4c0b      	ldr	r4, [pc, #44]	; (800042c <__libc_init_array+0x44>)
 80003fe:	f000 f817 	bl	8000430 <_init>
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	3601      	adds	r6, #1
 8000412:	4798      	blx	r3
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	3601      	adds	r6, #1
 800041c:	4798      	blx	r3
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
